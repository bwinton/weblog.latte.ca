<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../assets/xml/rss.xsl" media="all"?><rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/"><channel><title>Blog-O! (hg)</title><link>https://bwinton.github.io/weblog.latte.ca/</link><description></description><atom:link type="application/rss+xml" href="https://bwinton.github.io/weblog.latte.ca/tags/hg.xml" rel="self"></atom:link><language>en</language><lastBuildDate>Sat, 12 Mar 2016 18:09:32 GMT</lastBuildDate><generator>https://getnikola.com/</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>More hurray!</title><link>https://bwinton.github.io/weblog.latte.ca/blake/tech/thunderbird/firstcommit.html</link><dc:creator>Blake Winton</dc:creator><description>&lt;div&gt;&lt;p&gt;&lt;a href="http://weblog.latte.ca/blake/tech/thunderbird/FirstPatch"&gt;A while ago&lt;/a&gt; I had my
first patch to Thunderbird committed.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://hg.mozilla.org/releases/comm-1.9.1/pushloghtml?startdate=2009-10-28+11%3A00&amp;amp;enddate=2009-10-28+11%3A20"&gt;Today&lt;/a&gt; I pushed my first patch, all by myself.&lt;/p&gt;
&lt;p&gt;It’s kind of exciting, having checkin privileges.  It means that I
don’t have to wait for someone else to check in my changes once
they’re accepted.  But on the downside, it means that I’m the one who
has to do the commit, and watch the &lt;a href="http://tinderbox.mozilla.org/showbuilds.cgi?tree=Thunderbird3.0"&gt;Tinderbox&lt;/a&gt;, and
if anything goes wrong, I’m even more on the hook than I previously
was.  (Well, that last part isn’t really true, but I feel way more
nervous than when I could just add “checkin-needed” to the bug, and
not worry about it anymore.)  And basically there’s just a lot of new
stuff for me to keep track of, and figure out.  But since anything I
do is going to show up in the official history, I need to figure it
out &lt;em&gt;before&lt;/em&gt; I do it, which always adds a little pressure, which in
this case is probably a good thing.&lt;/p&gt;&lt;/div&gt;</description><category>hg</category><category>mozilla</category><category>patch</category><category>push</category><category>thunderbird</category><guid>https://bwinton.github.io/weblog.latte.ca/blake/tech/thunderbird/firstcommit.html</guid><pubDate>Wed, 28 Oct 2009 18:57:44 GMT</pubDate></item><item><title>More notes on Mercurial.</title><link>https://bwinton.github.io/weblog.latte.ca/blake/tech/thunderbird/pbranch.html</link><dc:creator>Blake Winton</dc:creator><description>&lt;div&gt;&lt;p&gt;Recently, I made some changes to &lt;a href="http://weblog.latte.ca/blake/tech/thunderbird/mercurial"&gt;my work flow&lt;/a&gt; to get around
some slight annoyances.  Specifically, I switched from using &lt;a href="http://mercurial.selenic.com/wiki/MqExtension"&gt;mq&lt;/a&gt; to using &lt;a href="http://arrenbrecht.ch/mercurial/pbranch/"&gt;pbranch&lt;/a&gt;.  The features that pbranch
gives me that mq didn’t basically boil down to two main things;
sharing, and tracking.&lt;/p&gt;
&lt;p&gt;With pbranch, it’s way easier for me to share my changes, both with
other people, and with myself in a virtual machine.  It &lt;em&gt;is&lt;/em&gt; possible
to share the patch with mq, by cloning the patch repo if I remembered
to run qinit -C, but with pbranch all I have to do is clone the main
repo, and my changes are right there, waiting for me.&lt;/p&gt;
&lt;p&gt;For tracking, when I’m nearing the end of a patch, and it mostly
works, I get really nervous if I can’t check in my changes.  With mq,
I set up an alias to let me commit the patch queue, so that I could go
back, but it was really hard to tell what I had changed between any
two commits, since it was showing me the diff of my diffs.  And so I
didn’t use it as much as I would like to.  With pbranch, I just commit
the code, like I want to, and it keeps track of what the patch should
look like.&lt;/p&gt;
&lt;p&gt;So, my day-to-day workflow now looks more like this:&lt;br&gt;
If I’m working on a bug that I’ve already got a patch started for, I
cd to the appropriate branch, type &lt;tt&gt;hg pgraph&lt;/tt&gt; to see where I
am, and &lt;tt&gt;hq update branchname&lt;/tt&gt; to get to the pbranch I want to
work on.  Then I make my changes, and when I’m happy with the results
of &lt;tt&gt;hg diff&lt;/tt&gt;, I type &lt;tt&gt;hg commit&lt;/tt&gt; to put the changes into
the pbranch.  After that, I use &lt;tt&gt;hg pdiff &amp;gt;
../branch-name-bugnum-description.diff&lt;/tt&gt; to get a patch that I can
upload to bugzilla.  At this point, I usually load the patch into Vim,
and search for some of the mistakes I’ve made in the past.
(&lt;tt&gt;/^+.*[[:space:]]+$&lt;/tt&gt;, and &lt;tt&gt;/dump&lt;/tt&gt; caught a lot of my
initial mistakes.  Now I’ve moved on to things that are tougher to
check for, like putting open-parens on a new line instead of on the
previous line.)  I usually go through a couple of cycles of &lt;tt&gt;hg
commit&lt;/tt&gt;/&lt;tt&gt;hg pdiff …&lt;/tt&gt; before I’m happy with the patch.  Once
I am, I don’t have to type anything before I upload it, since it’s
already committed.&lt;/p&gt;&lt;/div&gt;</description><category>hg</category><category>mercurial</category><category>mozilla</category><category>mq</category><category>pbranch</category><category>work</category><guid>https://bwinton.github.io/weblog.latte.ca/blake/tech/thunderbird/pbranch.html</guid><pubDate>Mon, 21 Sep 2009 15:48:34 GMT</pubDate></item><item><title>Another reason to use Mercurial (or Git or Bazaar)</title><link>https://bwinton.github.io/weblog.latte.ca/blake/tech/thunderbird/vms.html</link><dc:creator>Blake Winton</dc:creator><description>&lt;div&gt;&lt;p&gt;A lot of the code I write for &lt;a href="http://mozillamessaging.com/"&gt;Thunderbird&lt;/a&gt;
has to work on &lt;a href="http://www.mozillamessaging.com/en-US/thunderbird/all.html"&gt;all&lt;/a&gt; the platforms
it supports.  Since I don’t own a &lt;a href="http://www.ubuntu.com/"&gt;Linux&lt;/a&gt; or
&lt;a href="http://www.microsoft.com/windows/windows-7"&gt;Windows&lt;/a&gt; box, and don’t really
want to waste the hard drive space on my &lt;a href="http://www.apple.com/ca/macbookpro/specs.html"&gt;MacBook Pro&lt;/a&gt; with a dual- or triple-boot
setup, I’ve decided to install the other operating systems on virtual
machines.  (I’ve chosen &lt;a href="http://www.virtualbox.org/"&gt;VirtualBox&lt;/a&gt;, because
it’s free, and I’m cheap.  As an added bonus, it works quite well, too.)&lt;/p&gt;
&lt;p&gt;If I was forced to use a centralized version control system, this would
lead to a bunch of pain, since I wouldn’t want to check in a half-finished
patch, but I would still really want to see what changes I made for one OS,
to try and figure out what changes I need to make for the others.  And I
would want to be able to keep a record of what I did, step by step, so that
I could undo stuff if it turned out to be a bad idea.  (Hey, that sounds
like a perfect task for a version control system!  ;)&lt;/p&gt;
&lt;p&gt;Since Mozilla uses &lt;a href="http://mercurial.selenic.com/"&gt;Mercurial&lt;/a&gt;, I didn’t
have to deal with any of that.  I had my repository on the host machine,
which I had cloned from the main repo, and I just cloned it into each of
the virtual machines.  Whenever I started a VM, I pulled the latest set of
changes from the host machine; As I fixed stuff on that platform, I
committed to the repository on the virtual machine; And before I shut down
the VM, I pushed my changes back to the host machine.  When I wanted to see
which changes I made to get things working for the platform, it was easy,
and propagating those changes to the other virtual machines was also easy.&lt;/p&gt;
&lt;p&gt;When people talk about the advantages of distributed version control, a lot
of the time they mention being able to still commit your changes when
you’re on an airplane, and sharing in-progress changes with other people,
but for people like me who do mainly self-contained stuff and don’t fly
anywhere, supporting multi-platforms with virtual machines and still being
able to track my changes might just be the killer feature.&lt;/p&gt;&lt;/div&gt;</description><category>hg</category><category>programming</category><category>virtual_machines</category><guid>https://bwinton.github.io/weblog.latte.ca/blake/tech/thunderbird/vms.html</guid><pubDate>Mon, 14 Sep 2009 16:12:48 GMT</pubDate></item><item><title>How I use Mercurial (and the MQ extension).</title><link>https://bwinton.github.io/weblog.latte.ca/blake/tech/thunderbird/mercurial.html</link><dc:creator>Blake Winton</dc:creator><description>&lt;div&gt;&lt;p&gt;I started working for &lt;a href="http://www.mozillamessaging.com"&gt;Mozilla Messaging&lt;/a&gt; a
while ago, and since &lt;a href="http://blog.codekills.net/"&gt;David Wolever&lt;/a&gt; &lt;a href="http://twitter.com/wolever/status/2394705659"&gt;asked
me&lt;/a&gt; how I used Mercurial and the
MQ extension, I thought I would put up some notes on how I’m currently using
them in my day-to-day work.  Of course, the stuff I’m doing now is a little
different than what I’ve done in any of my previous jobs, so I’m not sure how
useful any of the following will be to anyone who isn’t contributing to an open
source project.&lt;/p&gt;
&lt;p&gt;First, let’s talk a little bit about how I have my Work directory set up.  The
first thing I did when I started working on the Thunderbird source code was to
pull down a clean copy of the source into a directory named “src-base”.  The
purpose of that directory is to always contain a clean copy of the upstream
source code so that when I want to update the various branches I have (five, at
last count), I only need to download the changes from the Mozilla repo once,
and I can then propagate them from src-base to the other branches.  I got the
idea to do that from the Bazaar-NG developers, and I think it has helped to
keep my bandwidth usage down.  It might cause a problem if I was sharing my
branches, but since Thunderbird seems to revolve around submitting patches to
bugzilla, it works out pretty well.&lt;/p&gt;
&lt;p&gt;The next thing I did was to clone src-base into a directory named
“add-reply-list-button” (because I was writing a patch to add a Reply-To-List
button :), go into that directory, and type &lt;tt&gt;hg qinit -c&lt;/tt&gt; to create an
mq repository, and put the mq repository itself under version control.  (I
didn’t actually do that the first time, and was quite annoyed that I couldn’t
revert changes I had made in my patch queue.)  The other part of that is that
I’ve aliased &lt;tt&gt;mq&lt;/tt&gt; to &lt;tt&gt;hg -R $(hg root)/.hg/patches&lt;/tt&gt;.  This lets
me type &lt;tt&gt;mq commit&lt;/tt&gt; to commit the changes to the patch.&lt;/p&gt;
&lt;p&gt;So, now we’re at my day-to-day work.  If I’m working on a bug that I’ve already
got a patch started for, I cd to the appropriate branch, type &lt;tt&gt;hg
qseries&lt;/tt&gt; to see where I am, and &lt;tt&gt;hq qpush&lt;/tt&gt; or &lt;tt&gt;hg qpop&lt;/tt&gt; to
get to the patch I want to work on.  Then I make my changes, and when I’m happy
with the results of &lt;tt&gt;hg diff&lt;/tt&gt;, I type &lt;tt&gt;hg qrefresh&lt;/tt&gt; to put the
changes into the patch.  After that, I use &lt;tt&gt;hg qdiff &amp;gt;
../branch-name-bugnum-description.diff&lt;/tt&gt; to get a patch that I can upload to
bugzilla.  At this point, I usually load the patch into Vim, and search for
some of the mistakes I’ve made in the past.  (&lt;tt&gt;/^+.*[[:space:]]+$&lt;/tt&gt;, and
&lt;tt&gt;/dump&lt;/tt&gt; caught a lot of my initial mistakes.  Now I’ve moved on to
things that are tougher to check for, like putting open-parens on a new line
instead of on the previous line.)  I usually go through a couple of cycles of
&lt;tt&gt;hg qrefresh&lt;/tt&gt;/&lt;tt&gt;hg qdiff …&lt;/tt&gt; before I’m happy with the patch.  Once
I am, I type &lt;tt&gt;mq commit -m "Updated patch to fix foo and bar."&lt;/tt&gt; to save
the state of the patch, and then I upload it.&lt;/p&gt;&lt;/div&gt;</description><category>hg</category><category>mercurial</category><category>mozilla</category><category>mq</category><category>work</category><guid>https://bwinton.github.io/weblog.latte.ca/blake/tech/thunderbird/mercurial.html</guid><pubDate>Wed, 01 Jul 2009 02:31:48 GMT</pubDate></item><item><title>Hurray!  (A technical diversion.)</title><link>https://bwinton.github.io/weblog.latte.ca/blake/tech/thunderbird/firstpatch.html</link><dc:creator>Blake Winton</dc:creator><description>&lt;div&gt;&lt;p&gt;It took a while, but my &lt;a href="http://hg.mozilla.org/comm-central/rev/98a7de404c08"&gt;first patch to Thunderbird&lt;/a&gt; was committed today!&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;changeset&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;   &lt;span class="mi"&gt;2727&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;98&lt;/span&gt;&lt;span class="n"&gt;a7de404c08&lt;/span&gt;
&lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;        &lt;span class="n"&gt;Blake&lt;/span&gt; &lt;span class="n"&gt;Winton&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;bwinton&lt;/span&gt;&lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="n"&gt;latte&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;ca&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="n"&gt;date&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;        &lt;span class="n"&gt;Fri&lt;/span&gt; &lt;span class="n"&gt;May&lt;/span&gt; &lt;span class="mi"&gt;29&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;35&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;37&lt;/span&gt; &lt;span class="mi"&gt;2009&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;0100&lt;/span&gt;
&lt;span class="n"&gt;summary&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;     &lt;span class="n"&gt;Bug&lt;/span&gt; &lt;span class="mi"&gt;45715&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="s2"&gt;""&lt;/span&gt;&lt;span class="n"&gt;Reply&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="s2"&gt;" [button/(context) menu item]"&lt;/span&gt;
             &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;mkmelin&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="n"&gt;sr&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;bienvenu&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="n"&gt;ui&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;review&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;clarkbw&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;The patch started off by adding a “Reply to List” button to the message
header pane as seen below, but after some discussion, the scope was
expanded to change the “Reply” button to “Reply All” or “Reply to List”,
depending on the message you’re currently viewing.&lt;/p&gt;
&lt;p&gt;&lt;img alt="First cut of the Reply to List button" src="https://bug45715.bugzilla.mozilla.org/attachment.cgi?id=364625" title="Reply to List"&gt;&lt;/p&gt;
&lt;p&gt;Of course, there’s still some things I’ve got to add, but those can go in a
separate patch, which will be much smaller, and so much easier to get
reviewed and committed.  And once it is, we might be able to close a
&lt;a href="https://bugzilla.mozilla.org/show_bug.cgi?id=45715"&gt;9-year old bug&lt;/a&gt;,
which would be pretty sweet.&lt;/p&gt;&lt;/div&gt;</description><category>hg</category><category>mozilla</category><category>patch</category><category>thunderbird</category><guid>https://bwinton.github.io/weblog.latte.ca/blake/tech/thunderbird/firstpatch.html</guid><pubDate>Fri, 29 May 2009 14:25:41 GMT</pubDate></item></channel></rss>