<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../assets/xml/rss.xsl" media="all"?><rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/"><channel><title>Blog-O! (mq)</title><link>https://bwinton.github.io/weblog.latte.ca/</link><description></description><atom:link type="application/rss+xml" href="https://bwinton.github.io/weblog.latte.ca/tags/mq.xml" rel="self"></atom:link><language>en</language><lastBuildDate>Sat, 12 Mar 2016 18:09:35 GMT</lastBuildDate><generator>https://getnikola.com/</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>More notes on Mercurial.</title><link>https://bwinton.github.io/weblog.latte.ca/blake/tech/thunderbird/pbranch.html</link><dc:creator>Blake Winton</dc:creator><description>&lt;div&gt;&lt;p&gt;Recently, I made some changes to &lt;a href="http://weblog.latte.ca/blake/tech/thunderbird/mercurial"&gt;my work flow&lt;/a&gt; to get around
some slight annoyances.  Specifically, I switched from using &lt;a href="http://mercurial.selenic.com/wiki/MqExtension"&gt;mq&lt;/a&gt; to using &lt;a href="http://arrenbrecht.ch/mercurial/pbranch/"&gt;pbranch&lt;/a&gt;.  The features that pbranch
gives me that mq didn’t basically boil down to two main things;
sharing, and tracking.&lt;/p&gt;
&lt;p&gt;With pbranch, it’s way easier for me to share my changes, both with
other people, and with myself in a virtual machine.  It &lt;em&gt;is&lt;/em&gt; possible
to share the patch with mq, by cloning the patch repo if I remembered
to run qinit -C, but with pbranch all I have to do is clone the main
repo, and my changes are right there, waiting for me.&lt;/p&gt;
&lt;p&gt;For tracking, when I’m nearing the end of a patch, and it mostly
works, I get really nervous if I can’t check in my changes.  With mq,
I set up an alias to let me commit the patch queue, so that I could go
back, but it was really hard to tell what I had changed between any
two commits, since it was showing me the diff of my diffs.  And so I
didn’t use it as much as I would like to.  With pbranch, I just commit
the code, like I want to, and it keeps track of what the patch should
look like.&lt;/p&gt;
&lt;p&gt;So, my day-to-day workflow now looks more like this:&lt;br&gt;
If I’m working on a bug that I’ve already got a patch started for, I
cd to the appropriate branch, type &lt;tt&gt;hg pgraph&lt;/tt&gt; to see where I
am, and &lt;tt&gt;hq update branchname&lt;/tt&gt; to get to the pbranch I want to
work on.  Then I make my changes, and when I’m happy with the results
of &lt;tt&gt;hg diff&lt;/tt&gt;, I type &lt;tt&gt;hg commit&lt;/tt&gt; to put the changes into
the pbranch.  After that, I use &lt;tt&gt;hg pdiff &amp;gt;
../branch-name-bugnum-description.diff&lt;/tt&gt; to get a patch that I can
upload to bugzilla.  At this point, I usually load the patch into Vim,
and search for some of the mistakes I’ve made in the past.
(&lt;tt&gt;/^+.*[[:space:]]+$&lt;/tt&gt;, and &lt;tt&gt;/dump&lt;/tt&gt; caught a lot of my
initial mistakes.  Now I’ve moved on to things that are tougher to
check for, like putting open-parens on a new line instead of on the
previous line.)  I usually go through a couple of cycles of &lt;tt&gt;hg
commit&lt;/tt&gt;/&lt;tt&gt;hg pdiff …&lt;/tt&gt; before I’m happy with the patch.  Once
I am, I don’t have to type anything before I upload it, since it’s
already committed.&lt;/p&gt;&lt;/div&gt;</description><category>hg</category><category>mercurial</category><category>mozilla</category><category>mq</category><category>pbranch</category><category>work</category><guid>https://bwinton.github.io/weblog.latte.ca/blake/tech/thunderbird/pbranch.html</guid><pubDate>Mon, 21 Sep 2009 15:48:34 GMT</pubDate></item><item><title>How I use Mercurial (and the MQ extension).</title><link>https://bwinton.github.io/weblog.latte.ca/blake/tech/thunderbird/mercurial.html</link><dc:creator>Blake Winton</dc:creator><description>&lt;div&gt;&lt;p&gt;I started working for &lt;a href="http://www.mozillamessaging.com"&gt;Mozilla Messaging&lt;/a&gt; a
while ago, and since &lt;a href="http://blog.codekills.net/"&gt;David Wolever&lt;/a&gt; &lt;a href="http://twitter.com/wolever/status/2394705659"&gt;asked
me&lt;/a&gt; how I used Mercurial and the
MQ extension, I thought I would put up some notes on how I’m currently using
them in my day-to-day work.  Of course, the stuff I’m doing now is a little
different than what I’ve done in any of my previous jobs, so I’m not sure how
useful any of the following will be to anyone who isn’t contributing to an open
source project.&lt;/p&gt;
&lt;p&gt;First, let’s talk a little bit about how I have my Work directory set up.  The
first thing I did when I started working on the Thunderbird source code was to
pull down a clean copy of the source into a directory named “src-base”.  The
purpose of that directory is to always contain a clean copy of the upstream
source code so that when I want to update the various branches I have (five, at
last count), I only need to download the changes from the Mozilla repo once,
and I can then propagate them from src-base to the other branches.  I got the
idea to do that from the Bazaar-NG developers, and I think it has helped to
keep my bandwidth usage down.  It might cause a problem if I was sharing my
branches, but since Thunderbird seems to revolve around submitting patches to
bugzilla, it works out pretty well.&lt;/p&gt;
&lt;p&gt;The next thing I did was to clone src-base into a directory named
“add-reply-list-button” (because I was writing a patch to add a Reply-To-List
button :), go into that directory, and type &lt;tt&gt;hg qinit -c&lt;/tt&gt; to create an
mq repository, and put the mq repository itself under version control.  (I
didn’t actually do that the first time, and was quite annoyed that I couldn’t
revert changes I had made in my patch queue.)  The other part of that is that
I’ve aliased &lt;tt&gt;mq&lt;/tt&gt; to &lt;tt&gt;hg -R $(hg root)/.hg/patches&lt;/tt&gt;.  This lets
me type &lt;tt&gt;mq commit&lt;/tt&gt; to commit the changes to the patch.&lt;/p&gt;
&lt;p&gt;So, now we’re at my day-to-day work.  If I’m working on a bug that I’ve already
got a patch started for, I cd to the appropriate branch, type &lt;tt&gt;hg
qseries&lt;/tt&gt; to see where I am, and &lt;tt&gt;hq qpush&lt;/tt&gt; or &lt;tt&gt;hg qpop&lt;/tt&gt; to
get to the patch I want to work on.  Then I make my changes, and when I’m happy
with the results of &lt;tt&gt;hg diff&lt;/tt&gt;, I type &lt;tt&gt;hg qrefresh&lt;/tt&gt; to put the
changes into the patch.  After that, I use &lt;tt&gt;hg qdiff &amp;gt;
../branch-name-bugnum-description.diff&lt;/tt&gt; to get a patch that I can upload to
bugzilla.  At this point, I usually load the patch into Vim, and search for
some of the mistakes I’ve made in the past.  (&lt;tt&gt;/^+.*[[:space:]]+$&lt;/tt&gt;, and
&lt;tt&gt;/dump&lt;/tt&gt; caught a lot of my initial mistakes.  Now I’ve moved on to
things that are tougher to check for, like putting open-parens on a new line
instead of on the previous line.)  I usually go through a couple of cycles of
&lt;tt&gt;hg qrefresh&lt;/tt&gt;/&lt;tt&gt;hg qdiff …&lt;/tt&gt; before I’m happy with the patch.  Once
I am, I type &lt;tt&gt;mq commit -m "Updated patch to fix foo and bar."&lt;/tt&gt; to save
the state of the patch, and then I upload it.&lt;/p&gt;&lt;/div&gt;</description><category>hg</category><category>mercurial</category><category>mozilla</category><category>mq</category><category>work</category><guid>https://bwinton.github.io/weblog.latte.ca/blake/tech/thunderbird/mercurial.html</guid><pubDate>Wed, 01 Jul 2009 02:31:48 GMT</pubDate></item></channel></rss>